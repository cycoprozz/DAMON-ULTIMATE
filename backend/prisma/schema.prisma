// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  name          String
  company       String?
  phone         String?
  password_hash String
  role          Role      @default(client)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  projects      Project[]
}

model Project {
  id                  Int       @id @default(autoincrement())
  user_id             Int?
  title               String
  type                ProjectType
  status              ProjectStatus @default(pending)
  budget              Decimal?
  progress_percentage Int?      @default(0)
  description         String?
  requirements        Json?
  delivery_date       DateTime?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  user                User?     @relation(fields: [user_id], references: [id], onDelete: SetNull)
  files               File[]
  payments            Payment[]
}

model File {
  id         Int      @id @default(autoincrement())
  project_id Int?
  filename   String
  file_url   String
  file_size  BigInt?
  file_type  String?
  uploaded_at DateTime @default(now())
  project    Project? @relation(fields: [project_id], references: [id], onDelete: Cascade)
}

model Payment {
  id                Int           @id @default(autoincrement())
  project_id        Int?
  stripe_payment_id String?       @unique
  amount            Decimal
  status            PaymentStatus @default(pending)
  payment_date      DateTime      @default(now())
  project           Project?      @relation(fields: [project_id], references: [id], onDelete: SetNull)
}

enum Role {
  client
  admin
}

enum ProjectType {
  reality_tv
  documentary
  music_video
  interview
  digital_content
  event_coverage
}

enum ProjectStatus {
  pending
  in_progress
  completed
  cancelled
}

enum PaymentStatus {
  pending
  completed
  failed
}
