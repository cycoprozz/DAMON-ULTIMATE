// This is your Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// CRM Models
model Customer {
  id              String        @id @default(cuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  name            String
  email           String       @unique
  phone           String?
  company         String?
  notes           String?
  status          CustomerStatus @default(LEAD)
  lastContactDate DateTime?
  
  // Relations
  interactions    Interaction[]
  serviceHistory  ServiceHistory[]

  @@map("customers")
}

model Interaction {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  customerId  String
  type        InteractionType
  description String
  date        DateTime
  outcome     String?
  nextAction  String?
  
  // Relations
  customer    Customer  @relation(fields: [customerId], references: [id])

  @@map("interactions")
}

model ServiceHistory {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  customerId  String
  serviceId   String
  status      ServiceHistoryStatus
  date        DateTime
  notes       String?
  
  // Relations
  customer    Customer  @relation(fields: [customerId], references: [id])

  @@map("service_history")
}

model AIInteraction {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  userId      String
  query       String    @db.Text
  response    String    @db.Text
  timestamp   DateTime
  
  @@map("ai_interactions")
}

// Enums for CRM
enum CustomerStatus {
  LEAD
  PROSPECT
  CUSTOMER
  INACTIVE
}

enum InteractionType {
  EMAIL
  CALL
  MEETING
  CHAT
  OTHER
}

enum ServiceHistoryStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  PENDING
}

// User model for authentication and client information
model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  email         String    @unique
  passwordHash  String
  firstName     String
  lastName      String
  company       String?
  phone         String?
  role          UserRole  @default(CLIENT)
  status        UserStatus @default(ACTIVE)
  
  // Relations
  profile       Profile?
  orders        Order[]
  files         File[]
  messages      Message[]

  @@map("users")
}

// User profile with additional details
model Profile {
  id          String    @id @default(cuid())
  userId      String    @unique
  avatar      String?
  bio         String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  preferences Json?
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

// Service categories (e.g., Video Production, Social Media, etc.)
model ServiceCategory {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  slug        String    @unique
  image       String?
  
  // Relations
  services    Service[]

  @@map("service_categories")
}

// Individual services within categories
model Service {
  id          String    @id @default(cuid())
  categoryId  String
  name        String
  description String
  price       Float
  duration    String?
  image       String?
  features    Json?
  status      ServiceStatus @default(ACTIVE)
  
  // Relations
  category    ServiceCategory @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]

  @@map("services")
}

// Orders/bookings made by clients
model Order {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  status      OrderStatus @default(PENDING)
  total       Float
  stripeId    String?   // For payment tracking
  
  // Relations
  user        User      @relation(fields: [userId], references: [id])
  items       OrderItem[]
  payments    Payment[]

  @@map("orders")
}

// Individual items within an order

// Individual items within an order
model OrderItem {
  id          String    @id @default(cuid())
  orderId     String
  serviceId   String
  quantity    Int
  price       Float
  
  // Relations
  order       Order     @relation(fields: [orderId], references: [id])
  service     Service   @relation(fields: [serviceId], references: [id])

  @@map("order_items")
}

// Payment records
model Payment {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  orderId     String
  amount      Float
  status      PaymentStatus @default(PENDING)
  stripeId    String?
  
  // Relations
  order       Order     @relation(fields: [orderId], references: [id])

  @@map("payments")
}

// File management
model File {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  userId      String
  name        String
  type        String
  size        Int
  url         String
  
  // Relations
  user        User      @relation(fields: [userId], references: [id])

  @@map("files")
}

// Communication/messages
model Message {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  userId      String
  subject     String
  content     String
  status      MessageStatus @default(UNREAD)
  
  // Relations
  user        User      @relation(fields: [userId], references: [id])

  @@map("messages")
}

// Enums
enum UserRole {
  ADMIN
  STAFF
  CLIENT
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ServiceStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum MessageStatus {
  UNREAD
  READ
  ARCHIVED
}
